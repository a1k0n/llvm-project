//===-- MCS51ISelDAGToDAG.cpp - A dag to dag inst selector for MCS51 ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the MCS51 target.
//
//===----------------------------------------------------------------------===//

#include "MCS51.h"
#include "MCTargetDesc/MCS51MCTargetDesc.h"
#include "MCS51TargetMachine.h"
#include "MCS51ISelLowering.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "MCS51-isel"

// MCS51-specific code to select MCS51 machine instructions for
// SelectionDAG operations.
namespace {
class MCS51DAGToDAGISel final : public SelectionDAGISel {
public:
  explicit MCS51DAGToDAGISel(MCS51TargetMachine &TargetMachine)
      : SelectionDAGISel(TargetMachine) {}

  StringRef getPassName() const override {
    return "MCS51 DAG->DAG Pattern Instruction Selection";
  }

  void Select(SDNode *Node) override;

// Include the pieces autogenerated from the target description.
#include "MCS51GenDAGISel.inc"
};
}

void MCS51DAGToDAGISel::Select(SDNode *Node) {
  // If we have a custom node, we have already selected
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  /*
    no custom DAG-DAG transforms
    SDLoc DL(Node);

    switch (Node->getOpcode()) {
    default:
      break;
    }
    */

  // Select the default instruction.
  SelectCode(Node);
}

// This pass converts a legalized DAG into a MCS51-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createMCS51ISelDag(MCS51TargetMachine &TM) {
  return new MCS51DAGToDAGISel(TM);
}

